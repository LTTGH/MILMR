library(devtools)
# step 1
devtools::document()
# step2
library(kernlab)
devtools::use_package("kernlab")
library(rootSolve)
devtools::use_package("rootSolve")
library(KM4MILEM)
library(mlr)
library(KM4MILEM)
makeRLearner.regr.EMforMILcvBag=function(){
##  Define the learner
makeRLearnerRegr(
cl = "regr.KMforMILEM", # name of the learner
package = "KM4MILEM", # Our new package
# parameter set
par.set = makeParamSet(
##lambda are discrete parapeter
makeNumericLearnerParam(id="lambda", default=1, lower = 0, upper=Inf),
makeNumericLearnerParam(id="sigma", default=0.5, lower = 0, upper=Inf),
makeNumericLearnerParam(id="p", default=1,lower = 1, upper=Inf),
makeNumericLearnerParam(id="tol", default=0,lower = 0, upper=Inf),
makeDiscreteLearnerParam(id="kerType", default="RBF", values = c("RBF","linear")),
makeDiscreteLearnerParam(id="testPurpose",default="testing",values = c("cv","testing"))
),
properties = c( "numerics", "factors"),
name = "EM algorith for multiple instance learning",
short.name = "KMforMILEM"
)
}
trainLearner.regr.KMforMILEM = function (.learner, .task,.subset,.weights = NULL, ...){
KM4MILEM::trainingMILEM_randomK(getTaskData(.task),...)
}
predictLearner.regr.KMforMILEM = function (.learner, .model, .newdata,...){
KM4MILEM::testingMILEM_randomK(.model$learner.model,MILdatTst=.newdata)
}
registerS3method("makeRLearner", "regr.KMforMILEM",
makeRLearner.regr.KMforMILEM)
makeRLearner.regr.KMforMILEM=function(){
##  Define the learner
makeRLearnerRegr(
cl = "regr.KMforMILEM", # name of the learner
package = "KM4MILEM", # Our new package
# parameter set
par.set = makeParamSet(
##lambda are discrete parapeter
makeNumericLearnerParam(id="lambda", default=1, lower = 0, upper=Inf),
makeNumericLearnerParam(id="sigma", default=0.5, lower = 0, upper=Inf),
makeNumericLearnerParam(id="p", default=1,lower = 1, upper=Inf),
makeNumericLearnerParam(id="tol", default=0,lower = 0, upper=Inf),
makeDiscreteLearnerParam(id="kerType", default="RBF", values = c("RBF","linear")),
makeDiscreteLearnerParam(id="testPurpose",default="testing",values = c("cv","testing"))
),
properties = c( "numerics", "factors"),
name = "EM algorith for multiple instance learning",
short.name = "KMforMILEM"
)
}
trainLearner.regr.KMforMILEM = function (.learner, .task,.subset,.weights = NULL, ...){
KM4MILEM::trainingMILEM_randomK(getTaskData(.task),...)
}
predictLearner.regr.KMforMILEM = function (.learner, .model, .newdata,...){
KM4MILEM::testingMILEM_randomK(.model$learner.model,MILdatTst=.newdata)
}
registerS3method("makeRLearner", "regr.KMforMILEM",
makeRLearner.regr.KMforMILEM)
registerS3method("trainLearner", "regr.KMforMILEM",
trainLearner.regr.KMforMILEM)
registerS3method("predictLearner", "regr.KMforMILEM",
predictLearner.regr.KMforMILEM)
regr.task_randomK=makeRegrTask(id="KMforMILEM",data=trainData,target = "Y")
randomK
source('C:/Users/liutiantian/Desktop/MILcode/Code4KMMILEM/myCVMeasure.R')
source('C:/Users/liutiantian/Desktop/MILcode/Code4KMMILEM/tuningParamSet_randomK.R')
source('C:/Users/liutiantian/Desktop/MILcode/Code4KMMILEM/EMlearner_randomK.R')
